{"builds":[{"id":"9278db32-7b8f-47b6-8f6c-c9e6d26cb19b","repositoryUrl":"https://github.com/TomPrograms/stormdb.git","commitHash":"25b8cb13b7f254a7269d7525bb690d8ba7a40c0c","startDate":"Sun Jun 13 2021 02:46:46 GMT+0300 (Moscow Standard Time)","endDate":"Sun Jun 13 2021 02:47:18 GMT+0300 (Moscow Standard Time)","command":"npm i && npm run test","status":true,"stdOutput":"\n> fsevents@1.2.13 install /Users/aleksejcvetkov/WebstormProjects/ci-implementation/agent/repositories/lAU5gujnEhfxwGA0AAAD/stormdb/node_modules/watchpack-chokidar2/node_modules/fsevents\n> node install.js\n\n  SOLINK_MODULE(target) Release/.node\n  CXX(target) Release/obj.target/fse/fsevents.o\n  SOLINK_MODULE(target) Release/fse.node\nadded 644 packages from 335 contributors and audited 644 packages in 27.161s\n\n36 packages are looking for funding\n  run `npm fund` for details\n\nfound 1 moderate severity vulnerability\n  run `npm audit fix` to fix them, or `npm audit` for details\n\n> stormdb@0.4.1 test /Users/aleksejcvetkov/WebstormProjects/ci-implementation/agent/repositories/lAU5gujnEhfxwGA0AAAD/stormdb\n> mocha ./tests --recursive --exit\n\n\n\n  StormDB\n    ✓ should successfully load local database\n    .value()\n      ✓ should throw error on non-existant data\n    .get()\n      ✓ should successfully get values from database\n      ✓ should successfully get values with multiple property accessors\n    .set()\n      ✓ should successfully change value in database\n      ✓ should successfully set value in database\n      ✓ should successfully set nested values with multiple property accessors\n      ✓ should successfully set on nested object\n      setting key-value pair\n        ✓ should successfully set key-value pair\n        ✓ should successfully set key-value pair with shorthand syntax\n        ✓ should be able to use non-strings as key\n    .delete()\n      ✓ should successfully remove value from database\n      ✓ should successfully remove nested values\n    .save()\n      ✓ should successfully save data back to database\n    .push()\n      ✓ should push data to an array\n      ✓ should refuse to push data to a non-array\n    .map()\n      ✓ should map array\n      ✓ should refuse to map a non-array\n      ✓ should refuse to map using non-function\n    .sort()\n      ✓ should sort array\n      ✓ should refuse to sort a non-array\n      ✓ should refuse to sort not using function or undefined\n    .reduce()\n      ✓ should reduce array\n      ✓ should refuse to reduce a non-array\n      ✓ should refuse to reduce using non-function\n    .filter()\n      ✓ should filter array\n      ✓ should refuse to filter using non-function\n      ✓ should refuse to filter non-array\n    .default()\n      ✓ default value should be used in place of empty db\n      ✓ default value shouldn't be used with non-empty db\n    .length()\n      ✓ should get lengths of db entries on .value()\n\n  Browser Engine\n    ✓ should successfully read data\n    ✓ should create empty database if it doesn't exist yet\n    ✓ should successfully write data\n    ✓ should throw error if trying to read incorrect data\n    ✓ should utilise custom deserialize function\n    ✓ should utilise custom serialize function\n\n  Local Engine\n    ✓ should utilise custom deserialize function\n    ✓ should utilise custom serialize function\n    ✓ should throw error if trying to read incorrect data\n    ✓ if database file empty, empty JSON object should be used\n    async engine option enabled\n      ✓ .save() function should return promise\n      ✓ .save() promise should reject is problem writing to file\n\n\n  43 passing (86ms)\n\n"}]}